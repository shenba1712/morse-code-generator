{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/TextMorseCode/text-to-morsecode.component.ts","webpack:///src/app/components/TextMorseCode/text-to-morsecode.component.html","webpack:///src/app/components/morse-code-text/morse-code-text.component.ts","webpack:///src/app/components/morse-code-text/morse-code-text.component.html","webpack:///src/app/components/reference/reference.component.ts","webpack:///src/app/components/reference/reference.component.html","webpack:///src/app/domain/alphabets.enum.ts","webpack:///src/app/domain/characters.enum.ts","webpack:///src/app/domain/numbers.enum.ts","webpack:///src/app/domain/special-char.enum.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","tower","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","TextToMorsecodeComponent","arrowRightIcon","arrowDownIcon","play","pause","stop","rate","jsonObject","JSON","parse","localStorage","getItem","storage","Object","entries","map","entry","entryValue","key","value","morsecode","text","searchText","trim","toUpperCase","charArray","forEach","char","charCodeAt","match","find","n","isLetter","undefined","saveToStorage","length","splice","push","setItem","stringify","c","toLowerCase","audioContext","createContext","state","resume","generateMorseAudio","currentTime","suspend","close","AudioContext","oscillator","createOscillator","gain","createGain","frequency","connect","destination","dot","start","time","morse","createSound","setValueAtTime","window","matchMedia","matches","generateMorseCode","MorseCodeTextComponent","alphabetKeys","numberKeys","specialCharKeys","morseCode","codeArray","split","generateText","ReferenceComponent","alphabetCode","numberCode","splCharCode","audioContexts","splCharKeys","alphabetPagedList","slice","splCharPagedList","join","replace","event","startIndex","pageIndex","pageSize","endIndex","index","pageAlphabetEvent","pageSplCharEvent","Alphabets","Characters","Numbers","SpecialChar","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {TextToMorsecodeComponent} from './components/TextMorseCode/text-to-morsecode.component';\nimport {MorseCodeTextComponent} from './components/morse-code-text/morse-code-text.component';\n\n\nconst routes: Routes = [\n  { path: 'text-to-morsecode', component: TextToMorsecodeComponent},\n  { path: 'morsecode-to-text', component: MorseCodeTextComponent},\n  { path: '', redirectTo: '/text-to-morsecode', pathMatch: 'full'},\n  { path: '**', redirectTo: '/text-to-morsecode', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport {faBroadcastTower} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'morse-code-generator';\n  tower = faBroadcastTower;\n}\n","<mat-toolbar class=\"bg-purple\">\n  <span style=\"cursor: pointer\">\n    <a routerLink=\"\">\n      <fa-icon [icon]=\"tower\"></fa-icon> Morse Code Generator\n    </a></span>\n  <span class=\"fill-space\"></span>\n  <div class=\"dropdown dropleft\">\n    <a class=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n      Menu\n    </a>\n\n    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\n      <a class=\"dropdown-item\" routerLink=\"/text-to-morsecode\">Text to Morse Code</a>\n      <a class=\"dropdown-item\" routerLink=\"/morsecode-to-text\">Morse Code to Text</a>\n    </div>\n  </div>\n</mat-toolbar>\n<div class=\"content\" role=\"main\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { TextToMorsecodeComponent } from './components/TextMorseCode/text-to-morsecode.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {FormsModule} from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ReferenceComponent} from './components/reference/reference.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport { MorseCodeTextComponent } from './components/morse-code-text/morse-code-text.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TextToMorsecodeComponent,\n    ReferenceComponent,\n    MorseCodeTextComponent\n  ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        MatToolbarModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatButtonModule,\n        FormsModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatTabsModule,\n        FontAwesomeModule\n    ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {Alphabets} from '../../domain/alphabets.enum';\nimport {Numbers} from '../../domain/numbers.enum';\nimport {Characters} from '../../domain/characters.enum';\nimport {SpecialChar} from '../../domain/special-char.enum';\nimport {faArrowDown, faArrowRight, faPauseCircle, faPlayCircle, faStopCircle} from '@fortawesome/free-solid-svg-icons';\nimport {ConversionHistory} from '../../domain/history';\n\n@Component({\n  selector: 'app-text-morse-code',\n  templateUrl: './text-to-morsecode.component.html',\n  styleUrls: ['./text-to-morsecode.component.scss']\n})\nexport class TextToMorsecodeComponent implements OnInit {\n\n  searchText: string;\n  morsecode: string;\n  storage: ConversionHistory[];\n\n  // icons\n  arrowRightIcon = faArrowRight;\n  arrowDownIcon = faArrowDown;\n  play = faPlayCircle;\n  pause = faPauseCircle;\n  stop = faStopCircle;\n\n  private audioContext: AudioContext;\n  oscillator: any;\n  gain: any;\n  rate: any = 20;\n  dot: any;\n\n  constructor() { }\n\n  ngOnInit() {\n    const jsonObject = JSON.parse(localStorage.getItem('text-to-morseCode'));\n    if (!!jsonObject) {\n      this.storage = Object.entries(jsonObject).map(entry => {\n        const entryValue = entry[1] as ConversionHistory;\n        return {\n          key: entryValue.key,\n          value: entryValue.value\n        };\n      });\n    }\n\n    if (!this.storage) {\n      this.storage = [];\n    }\n  }\n\n  generateMorseCode() {\n      this.morsecode = '';\n      const text = this.searchText.trim().toUpperCase();\n      const charArray = [...text];\n      charArray.forEach(char => {\n        if (char.charCodeAt(0) === 10) {\n          this.morsecode += '\\n\\n';\n        } else if (char.match('^[0-9]$')) {\n          const key = Object.keys(Numbers).find(n => Characters[n] === char);\n          this.morsecode = this.morsecode + Numbers[key] + ' ';\n        } else if (this.isLetter(char)) {\n          this.morsecode += Alphabets[char] + ' ';\n        } else if (char === ' ') {\n          this.morsecode += '/ ';\n        } else {\n          const key = Object.keys(SpecialChar).find(n => Characters[n] === char);\n          if (SpecialChar[key] !== undefined) {\n            this.morsecode += SpecialChar[key] + ' ';\n          }\n        }\n      });\n      this.saveToStorage();\n  }\n\n  private saveToStorage() {\n    if (this.storage.length > 10) {\n      this.storage.splice(0, 1);\n    }\n    this.storage.push({\n      key: this.searchText.toUpperCase(),\n      value: this.morsecode\n    });\n    localStorage.setItem('text-to-morseCode', JSON.stringify(this.storage));\n  }\n\n  private isLetter(c) {\n    return c.toLowerCase() !== c.toUpperCase();\n  }\n\n  playMorseText() {\n    if (this.audioContext === undefined) {\n      // Chrome requires audio context after gesture\n      // https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n      this.createContext();\n    } else if (this.audioContext.state === 'suspended') {\n      this.audioContext.resume(); // resume play when paused.\n      return;\n    }\n    this.generateMorseAudio(this.audioContext.currentTime, this.morsecode);\n  }\n\n  pauseResumeAudio() {\n    if (!!this.audioContext) {\n      if (this.audioContext.state === 'running') {\n        this.audioContext.suspend();\n      }\n    }\n  }\n\n  stopAudio() {\n    if (!!this.audioContext) {\n      if (this.audioContext.state !== 'closed') {\n        this.audioContext.close().then(() => {\n          this.audioContext = undefined;\n        });\n      }\n    }\n  }\n\n  private createContext() {\n    this.audioContext = new AudioContext();\n    this.oscillator = this.audioContext.createOscillator();\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0;\n    this.oscillator.frequency.value = 750;\n    this.oscillator.connect(this.gain);\n    this.gain.connect(this.audioContext.destination);\n    this.dot = 1.2 / this.rate;\n    this.oscillator.start(0);\n  }\n\n  private generateMorseAudio(time: any, morse: string) {\n    for (const code of morse) {\n      if (code === ' ') {\n        time += 3 * this.dot;\n      } else if (code !== undefined) {\n        time = this.createSound(time, code);\n        time += 2 * this.dot;\n      }\n    }\n  }\n\n  private createSound(time: any, char: string) {\n    for (const c of char) {\n      switch (c) {\n        case '.':\n          this.gain.gain.setValueAtTime(1.0, time);\n          time += this.dot;\n          this.gain.gain.setValueAtTime(0.0, time);\n          break;\n        case '-':\n          this.gain.gain.setValueAtTime(1.0, time);\n          time += 3 * this.dot;\n          this.gain.gain.setValueAtTime(0.0, time);\n          break;\n      }\n      time += this.dot;\n    }\n    return time;\n  }\n\n  isMobile() {\n    return window.matchMedia('(max-width: 487px)').matches;\n  }\n\n}\n\n","<div class=\"container-fluid mt-3\">\n\n  <div class=\"row\">\n    <div [ngClass]=\"!morsecode || morsecode?.length < 0 ? 'col-sm-12' : 'col-sm-5' \">\n      <div class=\"card mb-4\">\n        <h3 class=\"card-header\">Text In English</h3>\n        <div class=\"card-body\">\n          <mat-form-field class=\"mb-4\" appearance=\"outline\">\n            <textarea rows=\"7\" matInput [(ngModel)]=\"searchText\" [ngModelOptions]=\"{standalone: true}\"></textarea>\n          </mat-form-field>\n          <div class=\"float-right\">\n            <button type=\"button\" class=\"btn\" (click)=\"generateMorseCode()\">Convert</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"morsecode?.length > 0\">\n      <div class=\"col-sm-1\" [ngStyle]=\"!isMobile() ? {'display': 'flex', 'align-items': 'center'} :\n       {'display': 'flex', 'justify-content': 'center'}\">\n        <fa-icon [icon]=\"isMobile() ? arrowDownIcon : arrowRightIcon\" size=\"4x\"></fa-icon>\n      </div>\n      <div class=\"col-sm-6\">\n        <div class=\"card\">\n          <h3 class=\"card-header\">Morse Code</h3>\n          <div class=\"card-body\">\n            <h2 #code class=\"card-text\"><pre>{{morsecode}}</pre></h2>\n          </div>\n          <div class=\"card-body\" *ngIf=\"!!morsecode\">\n            <button class=\"float-right ml-1 btn\" (click)=\"playMorseText()\">\n              <fa-icon size=\"2x\" [icon]=\"play\" style=\"color: black !important;\"></fa-icon>\n            </button>\n            <button class=\"float-right ml-1 btn\" (click)=\"pauseResumeAudio()\">\n              <fa-icon size=\"2x\" [icon]=\"pause\" style=\"color: black !important;\"></fa-icon>\n            </button>\n            <button class=\"float-right btn\" (click)=\"stopAudio()\">\n              <fa-icon size=\"2x\" [icon]=\"stop\" style=\"color: black !important;\"></fa-icon>\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <div class=\"row mt-5\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <app-reference [history]=\"storage\"></app-reference>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {Numbers} from '../../domain/numbers.enum';\nimport {Characters} from '../../domain/characters.enum';\nimport {Alphabets} from '../../domain/alphabets.enum';\nimport {SpecialChar} from '../../domain/special-char.enum';\nimport {faArrowDown, faArrowRight} from '@fortawesome/free-solid-svg-icons';\nimport {ConversionHistory} from '../../domain/history';\n\n@Component({\n  selector: 'app-morse-code-text',\n  templateUrl: './morse-code-text.component.html',\n  styleUrls: ['./morse-code-text.component.scss']\n})\nexport class MorseCodeTextComponent implements OnInit {\n\n  morseCode: string;\n  text: string;\n  arrowRightIcon = faArrowRight;\n  arrowDownIcon = faArrowDown;\n\n  storage: ConversionHistory[];\n\n  alphabetKeys = Object.keys(Alphabets);\n  numberKeys = Object.keys(Numbers);\n  specialCharKeys = Object.keys(SpecialChar);\n\n  constructor() { }\n\n  ngOnInit() {\n    const jsonObject = JSON.parse(localStorage.getItem('morsecode-to-text'));\n    if (!!jsonObject) {\n      this.storage = Object.entries(jsonObject).map(entry => {\n        const entryValue = entry[1] as ConversionHistory;\n        return {\n          key: entryValue.key,\n          value: entryValue.value\n        };\n      });\n    }\n\n    if (!this.storage) {\n      this.storage = [];\n    }\n  }\n\n  generateText() {\n      this.text = '';\n      const morsecode = this.morseCode.trim();\n      const codeArray = morsecode.split(' ');\n      codeArray.forEach(code => {\n        if (code === '/') {\n          this.text += ' ';\n        } else {\n          let char = this.alphabetKeys.find(key => Alphabets[key] === code);\n          if (!!char) {\n            this.text += char;\n          } else {\n            char = this.numberKeys.find(key => Numbers[key] === code);\n            if (!!char) {\n              this.text += Characters[char];\n            } else {\n              char = this.specialCharKeys.find(key => SpecialChar[key] === code);\n              if (!!char) {\n                this.text += Characters[char];\n              }\n            }\n          }\n        }\n      });\n      if (!!this.text && !!this.morseCode) {\n        this.saveToStorage();\n      }\n  }\n\n  private saveToStorage() {\n    if (this.storage.length > 10) {\n      this.storage.splice(0, 1);\n    }\n    this.storage.push({\n      key: this.text.toUpperCase(),\n      value: this.morseCode\n    });\n    localStorage.setItem('morsecode-to-text', JSON.stringify(this.storage));\n  }\n\n  private isLetter(c) {\n    return c.toLowerCase() !== c.toUpperCase();\n  }\n\n  isMobile() {\n    return window.matchMedia('(max-width: 487px)').matches;\n  }\n\n\n}\n","<div class=\"container-fluid mt-3\">\n\n  <div class=\"row\">\n    <div [ngClass]=\"!text || text?.length < 0 ? 'col-sm-12' : 'col-sm-6' \">\n      <div class=\"card mb-4\">\n        <h3 class=\"card-header\">Morse Code</h3>\n        <h4 class=\"card-subtitle pl-3\">\n          Separate every morse code char with space and separate words with ' / ' (/ with spaces on both sides)\n          <br>\n          Eg: Hello ! -> .... . .-.. .-.. --- / -.-.--\n        </h4>\n        <div class=\"card-body\">\n          <mat-form-field style=\"margin-bottom: 0 !important;\" class=\"mb-4\" appearance=\"outline\">\n            <textarea [attr.rows]=\"!text || text?.length < 0 ? 5 : 4\" matInput [(ngModel)]=\"morseCode\" [ngModelOptions]=\"{standalone: true}\"></textarea>\n          </mat-form-field>\n          <div class=\"float-right\">\n            <button type=\"button\" class=\"btn\" (click)=\"generateText()\">Convert</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <ng-container *ngIf=\"text?.length > 0\">\n      <div class=\"col-sm-1\" [ngStyle]=\"!isMobile() ? {'display': 'flex', 'align-items': 'center'} :\n       {'display': 'flex', 'justify-content': 'center'}\">\n        <fa-icon [icon]=\"isMobile() ? arrowDownIcon : arrowRightIcon\" size=\"4x\"></fa-icon>\n      </div>\n      <div class=\"col-sm-5\">\n        <div class=\"card\">\n          <h3 class=\"card-header\">Text</h3>\n          <div class=\"card-body\">\n            <h2 class=\"card-text\"><pre>{{text}}</pre></h2>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n\n  <div class=\"row mt-5\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <app-reference [history]=\"storage\"></app-reference>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Alphabets} from '../../domain/alphabets.enum';\nimport {Numbers} from '../../domain/numbers.enum';\nimport {SpecialChar} from '../../domain/special-char.enum';\nimport {Characters} from '../../domain/characters.enum';\nimport {ConversionHistory} from '../../domain/history';\nimport {faPauseCircle, faPlayCircle, faStopCircle} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-reference',\n  templateUrl: './reference.component.html',\n  styleUrls: ['./reference.component.scss']\n})\nexport class ReferenceComponent {\n  @Input() history: ConversionHistory[];\n  alphabetKeys: string[];\n  alphabetCode = Alphabets;\n  alphabetPagedList: string[];\n\n  numberKeys: string[];\n  numberCode = Numbers;\n\n  splCharKeys: string[];\n  splCharCode = SpecialChar;\n  splCharPagedList: string[];\n\n  // icons\n  play = faPlayCircle;\n  pause = faPauseCircle;\n  stop = faStopCircle;\n\n  private audioContexts: AudioContext[] = [];\n  oscillator = [];\n  gain = [];\n  rate: any = 20;\n  dot: any;\n\n  constructor() {\n    this.alphabetKeys = Object.keys(Alphabets);\n    this.numberKeys = Object.keys(Numbers);\n    this.splCharKeys = Object.keys(SpecialChar);\n    this.alphabetPagedList = Object.keys(Alphabets).slice(0, 10);\n    this.splCharPagedList = Object.keys(SpecialChar).slice(0, 5);\n  }\n\n  convertCode(code: string): string {\n    return code.split('').join(' ');\n  }\n\n  format(key: string): string {\n    return key.replace('_', ' ');\n  }\n\n  showKey(key: string): string {\n    if (!!Characters[key]) {\n      return(Characters[key]);\n    }\n    return key;\n  }\n\n  pageAlphabetEvent(event) {\n    const startIndex = event.pageIndex * event.pageSize;\n    let endIndex = startIndex + event.pageSize;\n    if (endIndex > this.alphabetKeys.length) {\n      endIndex = this.alphabetKeys.length;\n    }\n    this.alphabetPagedList = this.alphabetKeys.slice(startIndex, endIndex);\n  }\n\n  pageSplCharEvent(event) {\n    const startIndex = event.pageIndex * event.pageSize;\n    let endIndex = startIndex + event.pageSize;\n    if (endIndex > this.splCharKeys.length) {\n      endIndex = this.splCharKeys.length;\n    }\n    this.splCharPagedList = this.splCharKeys.slice(startIndex, endIndex);\n  }\n\n  playMorseText(index, value) {\n    if (this.audioContexts[index] === undefined) {\n      // Chrome requires audio context after gesture\n      // https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio\n      this.createContext(index);\n    } else if (this.audioContexts[index].state === 'suspended') {\n      this.audioContexts[index].resume(); // resume play when paused.\n      return;\n    }\n    this.generateMorseAudio(index, this.audioContexts[index].currentTime, value);\n  }\n\n  pauseResumeAudio(index) {\n    if (!!this.audioContexts[index]) {\n      if (this.audioContexts[index].state === 'running') {\n        this.audioContexts[index].suspend();\n      }\n    }\n  }\n\n  stopAudio(index) {\n    if (!!this.audioContexts[index]) {\n      if (this.audioContexts[index].state !== 'closed') {\n        this.audioContexts[index].close().then(() => {\n          this.audioContexts[index] = undefined;\n        });\n      }\n    }\n  }\n\n  private createContext(index) {\n    this.audioContexts[index] = new AudioContext();\n    this.oscillator[index] = this.audioContexts[index].createOscillator();\n    this.gain[index] = this.audioContexts[index].createGain();\n    this.gain[index].gain.value = 0;\n    this.oscillator[index].frequency.value = 750;\n    this.oscillator[index].connect(this.gain[index]);\n    this.gain[index].connect(this.audioContexts[index].destination);\n    this.dot = 1.2 / this.rate;\n    this.oscillator[index].start(0);\n  }\n\n  private generateMorseAudio(index: number, time: any, morse: string) {\n    for (const code of morse) {\n      if (code === ' ') {\n        time += 3 * this.dot;\n      } else if (code !== undefined) {\n        time = this.createSound(index, time, code);\n        time += 2 * this.dot;\n      }\n    }\n  }\n\n  private createSound(index, time: any, char: string) {\n    for (const c of char) {\n      switch (c) {\n        case '.':\n          this.gain[index].gain.setValueAtTime(1.0, time);\n          time += this.dot;\n          this.gain[index].gain.setValueAtTime(0.0, time);\n          break;\n        case '-':\n          this.gain[index].gain.setValueAtTime(1.0, time);\n          time += 3 * this.dot;\n          this.gain[index].gain.setValueAtTime(0.0, time);\n          break;\n      }\n      time += this.dot;\n    }\n    return time;\n  }\n\n\n}\n","<div class=\"min-height container-fluid\">\n  <h1 class=\"text-center pb-3\">Morse Code Reference</h1>\n  <mat-tab-group mat-align-tabs=\"start\">\n    <mat-tab label=\"Alphabets\">\n      <div class=\"row pt-3\">\n        <div class=\"p-1 col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n          <div class=\"row text-center\" *ngFor=\"let key of alphabetPagedList\">\n            <div class=\"col-lg-6 col-md-6 col-sm-6\">\n              <h3>{{key}}</h3>\n            </div>\n            <div class=\"col-lg-4 col-md-4 col-sm-12\">\n              <h1 style=\"font-weight: bold\">{{convertCode(alphabetCode[key])}}</h1>\n            </div>\n          </div>\n          <mat-paginator [length]=\"alphabetKeys?.length\"\n                         [pageSize]=\"10\"\n                         [pageSizeOptions]=\"[5, 10, 15]\"\n                         (page)=\"pageAlphabetEvent($event)\"\n                         [showFirstLastButtons]=\"true\">\n          </mat-paginator>\n        </div>\n      </div>\n    </mat-tab>\n    <mat-tab label=\"Numbers\">\n      <div class=\"row pt-3\">\n        <div class=\"p-1 col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n          <div class=\"row text-center\" *ngFor=\"let key of numberKeys\">\n            <div class=\"col-lg-6 col-md-6 col-sm-6\">\n              <h3>{{showKey(key)}}</h3>\n            </div>\n            <div class=\"col-lg-4 col-md-4 col-sm-12\">\n              <h1 style=\"font-weight: bold\">{{convertCode(numberCode[key])}}</h1>\n            </div>\n          </div>\n        </div>\n      </div>\n    </mat-tab>\n    <mat-tab label=\"Special Characters\">\n      <div class=\"row pt-3\">\n      <div class=\"p-1 col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n        <div class=\"row text-center\" *ngFor=\"let key of splCharPagedList\">\n          <div class=\"col-lg-6 col-md-6 col-sm-6\">\n            <h3>{{format(key)}} [ {{showKey(key)}} ]</h3>\n          </div>\n          <div class=\"col-lg-4 col-md-4 col-sm-12\">\n            <h1 style=\"font-weight: bold\">{{convertCode(splCharCode[key])}}</h1>\n          </div>\n        </div>\n        <mat-paginator [length]=\"splCharKeys?.length\"\n                       [pageSize]=\"5\"\n                       [pageSizeOptions]=\"[5, 10]\"\n                       (page)=\"pageSplCharEvent($event)\"\n                       [showFirstLastButtons]=\"true\">\n        </mat-paginator>\n      </div>\n    </div>\n    </mat-tab>\n    <mat-tab label=\"History\" *ngIf=\"history?.length > 0\">\n      <div class=\"row pt-3\">\n        <div class=\"p-1 col-md-12 col-lg-12 col-sm-12 col-xs-12\">\n          <div class=\"row text-center\" *ngFor=\"let key of history; let i = index\">\n            <div class=\"col-lg-4 col-md-4 col-sm-4\">\n              <h3>{{key.key}}</h3>\n            </div>\n            <div class=\"col-lg-4 col-md-4 col-sm-4\">\n              <h1 style=\"font-weight: bold\">{{key.value}}</h1>\n            </div>\n            <div class=\"col-lg-4 col-md-4 col-sm-4\">\n              <ng-container>\n                <button class=\"mr-1 btn\" (click)=\"playMorseText(i, key.value)\">\n                  <fa-icon [icon]=\"play\" style=\"color: black !important;\"></fa-icon>\n                </button>\n                <button class=\"mr-1 btn\" (click)=\"pauseResumeAudio(i)\">\n                  <fa-icon [icon]=\"pause\" style=\"color: black !important;\"></fa-icon>\n                </button>\n                <button class=\"btn\" (click)=\"stopAudio(i)\">\n                  <fa-icon [icon]=\"stop\" style=\"color: black !important;\"></fa-icon>\n                </button>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n","export enum Alphabets {\n  A = '.-',\n  B = '-...',\n  C = '-.-.',\n  D = '-..',\n  E = '.',\n  F = '..-.',\n  G = '--.',\n  H = '....',\n  I = '..',\n  J = '.---',\n  K = '-.-',\n  L = '.-..',\n  M = '--',\n  N = '-.',\n  O = '---',\n  P = '.--.',\n  Q = '--.-',\n  R = '.-.',\n  S = '...',\n  T = '-',\n  U = '..-',\n  V = '...-',\n  W = '.--',\n  X = '-..-',\n  Y = '-.--',\n  Z = '--..',\n  Ä = '.-.-',\n  Ö = '---.',\n  Ü = '..--',\n  CH = '----',\n  é = '..-..',\n  ñ = '--.--',\n\n}\n","export enum Characters {\n  DOT = '.',\n  COMMA = ',',\n  QUESTION = '?',\n  AMPERSAND = '&',\n  APOSTROPHE = '\\'',\n  SLASH = '/',\n  AT = '@',\n  EQUAL = '=',\n  EXCLAMATION = '!',\n  PLUS = '+',\n  MINUS = '-',\n  OPEN_BRACKET = '(',\n  CLOSE_BRACKET = ')',\n  COLON = ':',\n  DOUBLE_QUOTE = '\\\"',\n  ZERO = '0',\n  ONE = '1',\n  TWO = '2',\n  THREE = '3',\n  FOUR = '4',\n  FIVE = '5',\n  SIX = '6',\n  SEVEN = '7',\n  EIGHT = '8',\n  NINE = '9'\n}\n","export enum Numbers {\n  ZERO = '-----',\n  ONE = '.----',\n  TWO = '..---',\n  THREE = '...--',\n  FOUR = '....-',\n  FIVE = '.....',\n  SIX = '-....',\n  SEVEN = '--...',\n  EIGHT = '---..',\n  NINE = '----.'\n}\n","export enum SpecialChar {\n  DOT = '.-.-.-',\n  COMMA = '--..--',\n  QUESTION = '..--..',\n  AMPERSAND = '.-...',\n  APOSTROPHE = '.----.',\n  SLASH = '-..-.',\n  AT = '.--.-.',\n  EQUAL = '-...-',\n  EXCLAMATION = '-.-.--',\n  PLUS = '.-.-.',\n  MINUS = '-....-',\n  OPEN_BRACKET = '-.--.',\n  CLOSE_BRACKET = '-.--.-',\n  COLON = '---...',\n  DOUBLE_QUOTE = '.-..-.'\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}